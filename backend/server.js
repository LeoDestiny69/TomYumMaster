// 1. ‡πÄ‡∏û‡∏¥‡πà‡∏° require('dotenv').config(); ‡πÑ‡∏ß‡πâ‡∏ö‡∏ô‡∏™‡∏∏‡∏î
require('dotenv').config();

const express = require('express');
const cors = require('cors');
const mysql = require('mysql2'); // ‡πÉ‡∏ä‡πâ mysql2 ‡∏î‡∏µ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö
const app = express();

app.use(cors());
app.use(express.json());

// **‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô (mock) ‡πÅ‡∏ö‡∏ö hardcode ‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ**
// const adminUser = {
//   username: 'admin',
//   password: '1234'
// };

// 2. ‡∏õ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• MySQL ‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å Environment Variables
// **‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å mysql.createConnection ‡πÄ‡∏õ‡πá‡∏ô mysql.createPool**
const pool = mysql.createPool({ // <--- ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
  host: process.env.DB_HOST,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_NAME,
  port: process.env.DB_PORT || 4000, // <--- ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤ Default PORT ‡πÄ‡∏õ‡πá‡∏ô 4000 (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö TiDB Cloud)
  ssl: {
    rejectUnauthorized: true, // ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô true ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ ‡πÅ‡∏ï‡πà‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô false ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
  },
  // **‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Connection Pool ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Idle Timeout**
  waitForConnections: true,     // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ connection ‡∏ß‡πà‡∏≤‡∏á ‡πÉ‡∏´‡πâ‡∏£‡∏≠
  connectionLimit: 10,          // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô connection ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÉ‡∏ô pool (‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°)
  queueLimit: 0,                // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô request ‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏¥‡∏ß‡πÑ‡∏î‡πâ (0 ‡∏Ñ‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î)
  idleTimeout: 600000,          // 10 ‡∏ô‡∏≤‡∏ó‡∏µ (600,000 ‡∏°‡∏¥‡∏•‡∏•‡∏¥‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ) - ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ Activity ‡∏à‡∏∞‡∏õ‡∏¥‡∏î Connection
  enableKeepAlive: true,        // ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Keep-Alive ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Connection ‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡∏î
  keepAliveInitialDelay: 0,     // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡πà‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì Keep-Alive ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
});

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Pool (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Connection ‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß‡πÜ)
pool.getConnection(err => { // <--- ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô pool.getConnection
  if (err) {
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î error ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏¢ debug
    console.error('‚ùå Error getting connection from MySQL pool:', err.stack); // <--- ‡πÅ‡∏Å‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Log
    console.error('Check your DB_HOST, DB_USER, DB_PASSWORD, DB_NAME, DB_PORT environment variables, and SSL configuration.');
    // ‡∏≠‡∏≤‡∏à‡∏à‡∏∞ exit process ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ DB ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢
    process.exit(1);
  }
  console.log('‚úÖ MySQL connection pool established.'); // <--- ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Log message
});


// **‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô db.query ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏õ‡πá‡∏ô pool.query**

// ‚úÖ POST: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≠‡∏á
app.post('/api/bookings', (req, res) => {
  const { name, phone, datetime, people, note } = req.body;
  const sql = 'INSERT INTO bookings (name, phone, datetime, people, note) VALUES (?, ?, ?, ?, ?)';
  pool.query(sql, [name, phone, datetime, people, note], (err, result) => { // <--- ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
    if (err) {
      console.error('‚ùå Database insert error:', err);
      return res.status(500).json({ error: 'Database insert error' });
    }
    res.status(201).json({ message: '‚úÖ Booking saved successfully' });
  });
});

// ‚úÖ GET: ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
app.get('/api/bookings', (req, res) => {
  const sql = 'SELECT * FROM bookings ORDER BY datetime DESC';
  pool.query(sql, (err, results) => { // <--- ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
    if (err) {
      console.error('‚ùå Database read error:', err);
      return res.status(500).json({ error: 'Database read error' });
    }
    res.json(results);
  });
});

// ‚úÖ DELETE: ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ï‡∏≤‡∏° ID
app.delete('/api/bookings/:id', (req, res) => {
  const { id } = req.params;
  const sql = 'DELETE FROM bookings WHERE id = ?';
  pool.query(sql, [id], (err, result) => { // <--- ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
    if (err) {
      console.error('‚ùå Database delete error:', err);
      return res.status(500).json({ error: 'Database delete error' });
    }
    if (result.affectedRows === 0) {
      return res.status(404).json({ error: 'Booking not found' });
    }
    res.json({ message: '‚úÖ Booking deleted successfully' });
  });
});

// ‚úÖ PUT: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ï‡∏≤‡∏° ID
app.put('/api/bookings/:id', (req, res) => {
  const { id } = req.params;
  const { name, phone, datetime, people, note } = req.body;
  const sql = 'UPDATE bookings SET name = ?, phone = ?, datetime = ?, people = ?, note = ? WHERE id = ?';
  pool.query(sql, [name, phone, datetime, people, note, id], (err, result) => { // <--- ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
    if (err) {
      console.error('‚ùå Database update error:', err);
      return res.status(500).json({ error: 'Database update error' });
    }
    if (result.affectedRows === 0) {
      return res.status(404).json({ error: 'Booking not found' });
    }
    res.json({ message: '‚úÖ Booking updated successfully' });
  });
});

// ‚úÖ POST: ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô (‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å DB - Plain Text Password)
app.post('/admin/login', (req, res) => {
  const { username, password } = req.body;
  console.log('üõÇ Admin Login Attempt:', username); // ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£ Log password

  // Query ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ admin user ‡∏î‡πâ‡∏ß‡∏¢ username ‡πÅ‡∏•‡∏∞ password ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
  const sql = 'SELECT id, username FROM admins WHERE username = ? AND password = ?';
  pool.query(sql, [username, password], (err, results) => { // ‡∏™‡πà‡∏á username ‡πÅ‡∏•‡∏∞ password ‡πÄ‡∏õ‡πá‡∏ô parameter
    if (err) {
      console.error('‚ùå Database query error during admin login:', err);
      return res.status(500).json({ success: false, message: 'Database error during login' });
    }

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö user ‡∏´‡∏£‡∏∑‡∏≠ username/password ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
    if (results.length === 0) {
      console.log('üö´ Admin Login Failed: Invalid credentials for', username);
      return res.status(401).json({ success: false, message: 'Invalid credentials' });
    }

    // ‡∏ñ‡πâ‡∏≤ Login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    console.log('‚úÖ Admin Login Success:', username);
    // ‡πÉ‡∏ô Production ‡∏Ñ‡∏ß‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á JWT Token ‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡πÅ‡∏ó‡∏ô mock-admin-token
    res.json({ success: true, token: 'mock-admin-token' });
  });
});

// 3. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Port ‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å Environment Variable ‡∏î‡πâ‡∏ß‡∏¢ (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Hosting)
// Render ‡∏à‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î PORT ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏≠‡∏á‡πÉ‡∏ô Production
const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
  console.log(`üöÄ Server running on port ${PORT}`);
});